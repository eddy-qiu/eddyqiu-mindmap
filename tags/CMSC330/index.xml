<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CMSC330 on</title><link>https://eddy-qiu.github.io/eddyqiu.com/tags/CMSC330/</link><description>Recent content in CMSC330 on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://eddy-qiu.github.io/eddyqiu.com/tags/CMSC330/index.xml" rel="self" type="application/rss+xml"/><item><title>CMSC330</title><link>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/CMSC330/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/CMSC330/</guid><description>[[CMSC330/Higher Order Functions|Higher Order Functions]] [[CMSC330/Regular Expressions|Regular Expressions]] [[CMSC330/Finite State Machines|Finite State Machines]] [[CMSC330/Lambda Calculus|Lambda Calculus]] [[CMSC330/OCaml|OCaml]] [[CMSC330/Context Free Grammars|Context Free Grammars]] [[CMSC330/Operational Semantics|Operational Semantics]] [[CMSC330/Rust|Rust]]</description></item><item><title>Context Free Grammars</title><link>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Context-Free-Grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Context-Free-Grammars/</guid><description>Syntax - what something looks like Semantics - what something means Grammar - subset of syntax
Nonterminal: symbol that stands or is a placeholder of other symbols Terminals: base symbols/symbols found in alphabet Production rules: rules that declare what terminals/order of terminals nonterminals can stand for Derivation: way to prove/derive a string from a CFG Leftmost derivation: when you expand or define the leftmost nonterminal during a derivation Rightmost derivation: when you expand or define the rightmost nonterminal during a derivation Ambiguity - multiple ways to derive a solution Not optimal, occurs if at least 2 valid leftmost derivations exist for any particular string Regex -&amp;gt; FSM like CFG -&amp;gt; PDA like REG -&amp;gt; Turing Machine Lexing (tokenizing): is the process of taking a string of characters, and making sure that the string contains valid words Parsing: is the process of making sure that the structures of the words is valid (making sure sentence is grammatically correct)</description></item><item><title>Finite State Machines</title><link>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Finite-State-Machines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Finite-State-Machines/</guid><description>finite amount of nodes for a graph a basis for Push Down Automata and Turing Machines recall Regex Alphabet Concatenation Branching (Union) Repetition (Kleene Closure) Definition of Regex: | $\emptyset$ | $\epsilon$ | $\delta$ | R$_1$R$_2$ | R$_1$ | R$_2$ | R$_1$* Deterministic (DFA) vs.</description></item><item><title>Higher Order Functions</title><link>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Higher-Order-Functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Higher-Order-Functions/</guid><description>Lambda Functions (lambda x: x + 1)
Functions without names, for simple expressions &amp;ldquo;anonymous functions&amp;rdquo; Can use as a parameter for a function to reduce redundant code environment: a mapping of variables to values closure: a tuple of (code to be executed, environment related to that code)</description></item><item><title>Lambda Calculus</title><link>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Lambda-Calculus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Lambda-Calculus/</guid><description>e -&amp;gt; x x is variable | $\lambda$ x.e function def - x is param e is body | e e application</description></item><item><title>OCaml</title><link>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/OCaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/OCaml/</guid><description>Functional Programming: a programming paradigm based on functions Features of functional languages:
Immutable states Minimize side effects Declarative programming (tell what to do, not how to do it) Referential transparency Realistic about the machine OCaml is compiled - ocamlc file.</description></item><item><title>Operational Semantics</title><link>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Operational-Semantics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Operational-Semantics/</guid><description> Denotational Semantics: describing through mathematical constructs Axiomatic Semantics: describing through promises Operational Semantics: describing through how things execute Syntax Value: v Expression: e Environment: A Prove recursively numbers addition (e1 -&amp;gt; n1 e2 -&amp;gt; n2 n3 is n1 + n2) (e1 + e2 -&amp;gt; n3) Variable lookup Environment separated by semicolons</description></item><item><title>Regular Expressions</title><link>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Regular-Expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Regular-Expressions/</guid><description>There is a minimum language needed to solve a problem Regular Expression: a pattern that describes a set of strings (REGEX) Used to describe regular languages | - OR symbol grey | gray gr(e | a)y {} - repeat (0,1){2} repeat twice (0,1){2,5} repeat 2-5 times Kleene Operator {&amp;quot;&amp;quot;, &amp;ldquo;ha&amp;rdquo;, &amp;ldquo;haha&amp;rdquo;, &amp;ldquo;hahaha&amp;rdquo;, &amp;hellip;} =&amp;gt; (ha)* ASCII ranges [0-9] [A-Z] [a-z] [A-Za-z] ^ - negate (when used inside a bracket environment) one or more repeats ?</description></item><item><title>Rust</title><link>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Rust/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://eddy-qiu.github.io/eddyqiu.com/eddyqiu/CMSC330/Rust/</guid><description>Made to be secure, fine grain control of memory but doesn&amp;rsquo;t let you malloc/free Has static typing, prefers explicit typing The default value or return type of an empty codeblock is unit Codeblocks can have statements and one (return) expression {}: unit end with statement -&amp;gt; returns and unit, end with expression, returns expression Safety Immutable variables by default, use mut keyword to make mutable No Garbage Collector (costly, space and runtime tradeoffs) and allows for mutability makes Rust low-level but safe Ownership Each value in Rust has an owner Only one owner at a time When owner goes out of scope, the value will be dropped really only impacts heap values (still applied to stack) .</description></item></channel></rss>